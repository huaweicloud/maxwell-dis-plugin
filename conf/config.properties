# mysql username 
user=maxwell
# mysql password
password=YOU_PASSWORD
# mysql host
host=localhost
# mysql port
port=3306

# log level [debug | info | warn | error]
log_level=info
# output DDL (table-alter, table-create, table-delete, etc) events
output_ddl=false
# input to dis partition function [database | table]
producer_partition_by=table
# Maxwell will be terminated on DIS errors when false. Otherwise, those producer errors will be logged and write to conf/failed_records.db
ignore_producer_error=false
# when ignore_producer_error set to true, error data will be written to conf/failed_records.db, this password will encrypt the data. if keep this password empty, data will not be encrypted.
producer_error_data_password=
# the frequency seconds that succeeded/failed messages are emitted to the log
metrics_slf4j_interval=60

# type of producer to use, default is 'dis'
producer=dis
# DIS Stream to write to.
dis.stream=YOU_STREAM_NAME
# if output_ddl is true, DDL changes will write to here (it will be the same as dis.stream when it's empty)
dis.ddl.stream=
# cloud region id
dis.region=cn-north-1
# user ak 
dis.ak=YOU_AK
# user sk
dis.sk=YOU_SK
# user project id
dis.projectId=YOU_PROJECT_ID
# DIS endpoint
dis.endpoint=https://dis.cn-north-1.myhuaweicloud.com
# dis.stream or dis.ddl.stream info cache second
dis.stream.cache.second=60
# the format of key key sent to DIS.
# hash : key is Key-Value format, contains database/table/primary-keys, eg. {"database":"test","table":"t2","pk.id":80}
# array : key is Array format, contains database, table, primary-keys,  eg. ["test","t2",[{"id":80}]]
# hash_table_only : key is Key-Value format, contains database/table,   eg. {"database":"test","table":"t2"}
dis.key.format=hash_table_only
# Used to send the table data to the specified dis stream or partition, If you don't configure this item, messages will be sent to ${dis.stream}
# The format is a json array, and each array should contains "database" and "stream_name", "table_name" and "partition_id" is optional
# "database"        is mandatory, you should specify a specific database name.
#                   for example "database":"DB_SPORT"
# "table_name"      is optional, and support regular expressions. If there is no such item, all messages of the "database" will sent to "stream_name".
#                   for example "table_name":"t_sport_basketball" or "table_name":"t_order|t_list" or "table_name":"t_.*"
# "stream_name"     is mandatory, you should specify a specific dis stream name.
#                   for example "stream_name":"dis-sport"
# "partition_id"    is optional, used to specify which partition to send data to. If there is no such item, ${producer_partition_by} will be used to calculate the partition id
#                   for example "partition_id":0
#
# if one message match [database] or [table_name], it will be sent to [stream_name] or [partition_id]
#
# example1 : dis.table.mapping=[{"database":"DB_SPORT", "stream_name":"dis-sport"}, {"database":"DB_FOOD", "stream_name":"dis-food"}]
#            this means that if message comes from DB_SPORT, it will be sent to dis-sport, if comes from DB_FOOD, it will be sent to dis-food, otherwise it will be sent to default ${dis.stream}
# example2 : dis.table.mapping=[{"database":"DB_SPORT", "table_name": "football", "stream_name":"dis-football"}]
#            this means that if message comes from DB_SPORT and table name match football, it will be sent to dis-football, otherwise it will be sent to default ${dis.stream}
# example3 : dis.table.mapping=[{"database":"DB_SPORT", "table_name": ".*ball", "stream_name":"dis-sport", "partition_id":0}]
#            this means that if message comes from DB_SPORT, and table name ends with 'ball', it will be sent to dis-sport and the partition 0.
dis.table.mapping=

# database or table filter. command separated list of filter-rules, evaluated in sequence.
# A filter rule is:
#  <type> ":" <db> "." <tbl> [ "." <col> "=" <col_val> ]
#  type    ::= [ "include" | "exclude" ]
#  db      ::= [ "/regexp/" | "string" | "`string`" | "*" ]
#  tbl     ::= [ "/regexp/" | "string" | "`string`" | "*" ]
#  col     ::= "column_name"
#  col_val ::= [ "/regexp/" | "string" | "`string`" | "*" ]
# example1 exclude: *.*,include: mydatabase.*
# example2 exclude: *.*,include: mydatabase.mytable
# example3 exclude: *.*,include: mydatabase.mytable, include: mydatabase./mydate_\\d*/
# example4 exclude: db.*, include: *.tbl, include: *./bar(bar)?/, exclude: foo.bar.col=val
filter=